{{if eq .Values.app.platform "ee"}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{.Values.app.name}}
  labels:
    app: {{.Values.app.name}}
spec:
  serviceName: "{{.Values.app.name}}-svc"
  replicas: {{.Values.statefulset.replicas}}
  selector:
    matchLabels:
      app: {{.Values.app.name}}
  template:
    metadata:
      labels:
        app: {{.Values.app.name}}
    spec:
      securityContext:
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: {{.Values.app.name}}
        image: {{.Values.statefulset.container.image}}
        imagePullPolicy: IfNotPresent
        ports:
        - name: grpc
          containerPort: 8124
          protocol: TCP
        - name: gui
          containerPort: 8024
          protocol: TCP
        env:
        - name: AXONIQ_LICENSE
          value: "/{{.Values.app.name}}/license/axoniq.license"
        volumeMounts:
        - name: data
          mountPath: /{{.Values.app.name}}/data
        - name: events
          mountPath: /{{.Values.app.name}}/events
        - name: log
          mountPath: /{{.Values.app.name}}/log
        - name: config
          mountPath: /{{.Values.app.name}}/config
          readOnly: true
        - name: cluster-template
          mountPath: /{{.Values.app.name}}/config/cluster-template
          readOnly: false
        - name: system-token
          mountPath: /{{.Values.app.name}}/security
          readOnly: true
        - name: license
          mountPath: /{{.Values.app.name}}/license
          readOnly: true
        # readinessProbe:
        #   httpGet:
        #     path: {{.Values.statefulset.readiness.httpGet.path}}
        #     port: {{.Values.statefulset.readiness.httpGet.port}}
        #   initialDelaySeconds: {{.Values.statefulset.readiness.initialDelaySeconds}}
        #   periodSeconds: {{.Values.statefulset.readiness.periodSeconds}}
        #   timeoutSeconds: {{.Values.statefulset.readiness.timeoutSeconds}}
        #   failureThreshold: {{.Values.statefulset.readiness.failureThreshold}}
        # livenessProbe:
        #   httpGet:
        #     path: {{.Values.statefulset.liveness.httpGet.path}}
        #     port: {{.Values.statefulset.liveness.httpGet.port}}
        #   initialDelaySeconds: {{.Values.statefulset.liveness.initialDelaySeconds}}
        #   periodSeconds: {{.Values.statefulset.liveness.periodSeconds}}
        #   timeoutSeconds: {{.Values.statefulset.liveness.timeoutSeconds}}
        #   successThreshold: {{.Values.statefulset.liveness.successThreshold}}
        #   failureThreshold: {{.Values.statefulset.liveness.failureThreshold}}
      volumes:
        - name: config
          secret:
            secretName: axonserver-properties
        - name: cluster-template
          secret:
            secretName: axonserver-cluster-template
        - name: system-token
          secret:
            secretName: axonserver-token
        - name: license
          secret:
            secretName: axonserver-license
  volumeClaimTemplates:
    - metadata:
        name: events
      spec:
        accessModes: [ "{{.Values.volumeClaimTemplates.events.accessModes}}" ]
        resources:
          requests:
            storage: {{.Values.volumeClaimTemplates.events.storage}}
    - metadata:
        name: log
      spec:
        accessModes: [ "{{.Values.volumeClaimTemplates.log.accessModes}}" ]
        resources:
          requests:
            storage: {{.Values.volumeClaimTemplates.log.storage}}
    - metadata:
        name: data
      spec:
        accessModes: [ "{{.Values.volumeClaimTemplates.data.accessModes}}" ]
        resources:
          requests:
            storage: {{.Values.volumeClaimTemplates.data.storage}}
{{end}}